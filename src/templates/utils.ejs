/**
 * Defines request parameter type.
 */
export interface AxiosAction {
    REQUEST: string;
    SUCCESS: string;
    FAILURE: string;
}

/**
 * used to create new request parameter type easily for axios and redux usage.
 * @param name The general name of this parameter.
 */
export function getActionsObject(
    name: string
): AxiosAction {
    return {
        REQUEST: name.toUpperCase() + '_REQUEST',
        SUCCESS: name.toUpperCase() + '_SUCCESS',
        FAILURE: name.toUpperCase() + '_FAILURE',
    }
}

/**
 * Defines a http request.
 * @param a
 * @param method
 * @param url
 * @param data
 * @param client
 * @param redirectTo
 */
export function createHttpRequest(
    a: AxiosAction,
    method: 'GET' | 'POST' | 'DELETE' | 'PUT',
    url: string,
    data: any,
    client?: 'default' | 'v2' | 'nlp_v1' | 'tf',
    redirectTo?: string
) {
    return {
        types: [a.REQUEST, a.SUCCESS, a.FAILURE],
        payload: {
            redirectTo: redirectTo,
            client: client ? client : 'default',
            request: {
                method: method,
                url: url,
                data: data
            }
        }
    }
}

/**
 * Compose url with possible parameters. All parameters are checked before applying to the path.
 * @param url The base url.
 * @param params Possible parameters with name as a string and value as any.
 */
export function composeUrlWithParameters(
    url: string,
    params: { name: string, value: any }[]
): string {
    let path = url;
    const nonNullParams = params.filter(p =>
        p.value !== null &&
        p.value !== undefined &&
        p.value.toString() !== 'null' &&
        p.value.toString() !== 'undefined'
    );
    nonNullParams.forEach(p => {
        path += `${p.name === nonNullParams[0].name ? '?' : '&'}${p.name}=${p.value}`;
    });
    return path;
}