openapi: 3.0.0
info:
  title: Example API
  description: This is universal example API
  version: 0.1.0
servers:
  - url: http://localhost:8081
    description: Development environment

# URL requests
paths:
  /users:
    post:
      operationId: registerUser
      summary: Registers a new user
      description: Try to register a new user if such username and meail does not exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDao'
      responses:
        '200':
          description: In case off success returns user object that is saved into the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    patch:
      operationId: updateUserInfo
      summary: Update user information.
      description: Edit username for existing user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  description: User ID.
                username:
                  type: string
                  description: Username for this user.
      responses:
        '200':
          description: In case off success returns user object that is changed and saved into the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /users/{id}:
    get:
      operationId: getUserById
      summary: Returns a user for specific id
      description: Returns user by it's id if such user exists in the database.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: The user ID
      responses:
        '200':
          description: A user dto object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/Unauthorized'

# MODELS
components:
#  Responses
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionStatusDto'

#  Security
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY  # name of the header, query parameter or cookie

# Models
  schemas:
    # Users
    UserDao:
      type: object
      description: Data model used to store and get data from the database.
      required:
        - username
        - password_hash
      properties:
        id:
          type: integer
          format: int64
          description: User ID
        username:
          type: string
          description: User nickname
        password_hash:
          type: string
          description: Hash of user password
        role:
          $ref: '#/components/schemas/RoleDto'

    UserGetDto:
      type: object
      description:
        User object used to be returned from REST endpoint on a request. Contains only
        certain fields that can be exposed to the consumer.
      properties:
        id:
          type: integer
          format: int64
          description: User ID
        username:
          type: string
          description: User nickname
        role:
          $ref: '#/components/schemas/RoleDto'

    RoleDto:
      type: object
      description: User role
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Role ID
        name:
          type: string
          description: Name of the role


